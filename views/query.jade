doctype html
meta(charset='utf-8')
style.
    .link {
        fill: none;
        stroke: #666;
        stroke-width: 1.5px;
    }
    .node circle {
        fill: #ccc;
        stroke: #fff;
        stroke-width: 1.5px;
    }
    text {
        font: 10px sans-serif;
        pointer-events: none;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .bar {
        fill: orange;
    }

    .bar:hover {
        fill: orangered;
    }

    .x.axis path {
        display: none;
    }

    .d3-tip {
        line-height: 1;
        font-weight: bold;
        padding: 12px;
        background: rgba(0, 0, 0, 0.8);
        color: #fff;
        border-radius: 2px;
    }

    /* Creates a small triangle extender for the tooltip */
    .d3-tip:after {
        box-sizing: border-box;
        display: inline;
        font-size: 10px;
        width: 100%;
        line-height: 1;
        color: rgba(0, 0, 0, 0.8);
        content: "\25BC";
        position: absolute;
        text-align: center;
    }

    /* Style northward tooltips differently */
    .d3-tip.n:after {
        margin: -1px 0 0 0;
        top: 100%;
        left: 0;
    }
body
    .container
        form(action='/query', method='GET')
            .form-group
                label(for='limit') Limit:
                input#limit.form-control(type='number', name='limit')
            button.btn.btn-default(type='submit') Draw

        .graph
        .chart
            div
                table(border=1)
                    thead
                        tr
                            th Keyword
                            th Avg. Monthly Searches (exact match only)
                            th Suggested bid
                            th Competition
                            th Rank
                    tbody
                        each row, i in chartData
                            tr
                                td
                                    | #{row.query}
                                td
                                    | #{row.volume}
                                td
                                    | #{row.suggestion_bid}
                                td
                                    | #{row.competitive}
                                td
                                    | #{row.rank}

script(type='text/javascript', src='/static/lib/jquery.min.js')
script(type='text/javascript', src='/static/lib/bootstrap/js/bootstrap.js')
script(type='text/javascript', src="/static/lib/d3.min.js")
script(type='text/javascript', src="/static/lib/d3-tip.js")
script.
    // http://blog.thomsonreuters.com/index.php/mobile-patent-suits-graphic-of-the-day/
    var links = createGraphData(!{JSON.stringify(graphData || [])});
    var nodes = {};
    // Compute the distinct nodes from the links.
    links.forEach(function(link) {
        link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
        link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
    });
    var width = 3060,
        height = 3500;
    var force = d3.layout.force()
        .nodes(d3.values(nodes))
        .links(links)
        .size([width, height])
        .linkDistance(150)
        .charge(-300)
        .on("tick", tick)
        .start();
    var svg = d3.select(".graph").append("svg")
        .attr("width", width)
        .attr("height", height);
    var link = svg.selectAll(".link")
        .data(force.links())
        .enter().append("line")
        .attr("class", "link");
    var node = svg.selectAll(".node")
        .data(force.nodes())
        .enter().append("g")
        .attr("class", "node")
        .on("mouseover", mouseover)
        .on("mouseout", mouseout)
        .call(force.drag);
    node.append("circle")
        .attr("r", 8);
    node.append("text")
        .attr("x", 12)
        .attr("dy", ".35em")
        .text(function(d) { return d.name; });

    function createGraphData(data) {
        var result = [];
        for (var i = 0; i < data.length; i++) {
            result.push({source: data[i].row_name, target: data[i]._column_name, type: "licensing"})
        }
        return result;
    }
    function tick() {
        link
            .attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });
        node
            .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
    }
    function mouseover() {
        d3.select(this).select("circle").transition()
            .duration(750)
            .attr("r", 16);
    }
    function mouseout() {
        d3.select(this).select("circle").transition()
            .duration(750)
            .attr("r", 8);
    }
